<?php
declare(strict_types=1);

require_once 'vendor/autoload.php';

use PHPUnit\Framework\TestCase;

final class ParallelogramTest extends TestCase
{
  /**
   * @var ShapeInterface $shape Shape
   * @var float $ratio Ratio
   */
  private $shape;
  private $ratio;

  /**
   * Setting up the test
   */
  public function setUp(): void
  {
    parent::setUp(); // TODO: Change the autogenerated stub
    $scale = 14;
    $this->ratio = 2.1234567890123;
    $base = 2.456;
    $anotherSide = 3.456;
    $height = 4.567;
    //Instantiating a shape object
    $this->shape = new Shapes\Parallelogram ($scale);
    $this->shape->setBaseAndHeight($base, $anotherSide, $height);
  }

  /**
   * Testing ::getArea()
   * @throws Exception
   */
  public function testGetArea(): void
  {
    $actual = $this->shape->getArea();
    $this->assertEquals(11.216552, $actual);
  }

  /**
   * Testing ::getPerimeter()
   * @throws Exception
   */
  public function testGetPerimeter(): void
  {
    $actual = $this->shape->getPerimeter();
    $this->assertEquals(11.824, $actual);
  }

  /**
   * Testing ::resize(float $ratio)
   * @throws Exception
   */
  public function testResize(): void
  {
    $this->shape->resize($this->ratio);
    $actualArea = $this->shape->getArea();
    $actualPerimeter = $this->shape->getPerimeter();
    $this->assertEquals(50.576203935486, $actualArea);
    $this->assertEquals(25.107753073282, $actualPerimeter);
  }

}